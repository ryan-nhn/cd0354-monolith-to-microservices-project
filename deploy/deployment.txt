## Apply env variables and secrets
kubectl apply -f aws-secret.yaml
kubectl apply -f env-secret.yaml
kubectl apply -f env-configmap.yaml

## Deployments - Double check the Dockerhub image name and version in the deployment files
kubectl apply -f deployment-udagram-api-feed.yaml
kubectl apply -f service-udagram-api-feed.yaml

kubectl apply -f deployment-udagram-api-user.yaml
kubectl apply -f service-udagram-api-user.yaml

kubectl apply -f deployment-udagram-frontend.yaml
kubectl apply -f service-udagram-frontend.yaml

kubectl apply -f deployment-udagram-reverseproxy.yaml
kubectl apply -f service-udagram-reverseproxy.yaml

## Create a Service object that exposes the frontend deployment
## The command below will ceates an external load balancer and assigns a fixed, external IP to the Service.
kubectl expose deployment udagram-frontend --type=LoadBalancer --name=publicfrontend
kubectl expose deployment reverseproxy --type=LoadBalancer --name=publicreverseproxy  

## You can autoscale, if required, as
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
kubectl edit hpa   
kubectl delete hpa udagram-api-feed 
kubectl autoscale deployment udagram-api-feed --cpu-percent=70 --min=3 --max=5